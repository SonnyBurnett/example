# Maven
# Build your Java project and run tests with Apache Maven.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

trigger:
- master

pool:
  vmImage: ubuntu-latest

steps:
- task: Maven@3
  displayName: Maven Package
  inputs:
    mavenPomFile: 'pom.xml'
    mavenOptions: '-Xmx3072m'
    mavenAuthenticateFeed: true
    javaHomeOption: 'JDKVersion'
    jdkVersionOption: '1.8'
    jdkArchitectureOption: 'x64'
    publishJUnitResults: true
    testResultsFiles: '**/surefire-reports/TEST-*.xml'
    goals: 'package'

- task: PublishPipelineArtifact@1
  displayName: Publish Artifact
  inputs:
    targetPath: $(System.DefaultWorkingDirectory)/target
    artifactName: petclinic

- task: Maven@3
  displayName: Maven Deploy
  inputs:
    mavenPomFile: 'pom.xml'
    mavenOptions: '-Xmx3072m'
    mavenAuthenticateFeed: true
    javaHomeOption: 'JDKVersion'
    jdkVersionOption: '1.8'
    jdkArchitectureOption: 'x64'
    publishJUnitResults: true
    testResultsFiles: '**/surefire-reports/TEST-*.xml'
    goals: 'deploy'

# STEP: COPY .WAR FILE TO DOCKER SOMEHOW --V
# CREATE DOCKER IMAGE CONTAINING .WAR FILE --V
# PUBLISH DOCKER TO DOCKERHUB --V
# TERRAFORM WHICH CREATES THE VM ON AZURE --V
# PROVISION VM USING ANSIBLE (E.G. DOCKER)
# RUN DOCKER IMAGE ON VM

- task: DockerInstaller@0
  displayName: Install Docker
  inputs:
    dockerVersion: '17.09.0-ce'

- task: DownloadPipelineArtifact@2
  displayName: Download Pipeline Artifact
  inputs:
    buildType: 'current'
    patterns: '**/**.war'
    artifactName: 'petclinic'
    targetPath: '$(Build.SourcesDirectory)'

- task: Docker@2
  displayName: Build and Push Docker
  inputs:
    containerRegistry: 'dockerhub'
    repository: 'nickbakker/tomcat'
    command: 'buildAndPush'
    Dockerfile: '**/Dockerfile'
    buildContext: '$(Build.SourcesDirectory)'
    tags: latest

- task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@0
  displayName: Install Terraform
  inputs:
    terrafromVersion: '0.15.0'

- task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
  displayName: Terra Init
  inputs:
    command: 'init'
    workingDirectory: $(System.DefaultWorkingDirectory)
    backendServiceArm: 'azureconnection'
    backendAzureRmResourceGroupName: 'myResourceGroup'
    backendAzureRmStorageAccountName: 'storageaccountnick'
    backendAzureRmContainerName: 'blob'
    backendAzureRmKey: 'terraform.tfstate'

- task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
  displayName: Terra Plan
  inputs:
    command: 'plan'
    workingDirectory: $(System.DefaultWorkingDirectory)
    environmentServiceNameAzureRM: 'azureconnection'

- task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
  displayName: Terra Apply
  inputs:
    command: 'apply'
    workingDirectory: $(System.DefaultWorkingDirectory)
    environmentServiceNameAzureRM: 'azureconnection'

#- task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
#  displayName: Terra Destroy
#  inputs:
#    command: 'destroy'
#    workingDirectory: $(System.DefaultWorkingDirectory)
#    environmentServiceNameAzureRM: 'azureconnection'
